#!/bin/bash
set -eu

PLANSRC=/var/vcap/jobs/redis-blacksmith-plans/plans
SVCROOT=/var/vcap/data/blacksmith/redis-forge/services
rm    -rf $SVCROOT
mkdir -p  $SVCROOT

# Copy the service definition stub for Blacksmith
cp $PLANSRC/service.yml $SVCROOT

<% p('plans').each do |id, plan| %>
##############################################
#
# Set up plan <%= id %>
#
PLANROOT="$SVCROOT/<%= id %>"
PLANTYPE="<%= plan["type"] || 'standalone' %>"

mkdir -p $PLANROOT
cat > $PLANROOT/plan.yml <<EOF
---
id: <%= id %>
name: <%= plan["name"] || id %>
limit: <%= plan["limit"] || 0 %>
description: |+
  <%= plan["description"] || 'no description provided' %>
EOF

for file in init credentials.yml manifest.yml; do
  cp $PLANSRC/$PLANTYPE/$file $PLANROOT/
done
chmod 0755 $PLANROOT/init

cat > $PLANROOT/params.yml <<EOF
---
# auto-generated by redis-blacksmith-plans
# for plan-id <%= id %> (<%= plan["name"] || id %>)
meta:
  size: <%= plan["vm_type"] || 'default' %>
  net:  <%= plan["network"] || 'redis-service' %>

  <% if plan["redis_maxmemory-policy"] %>
  redis_maxmemory-policy: <%= plan["redis_maxmemory-policy"] %>
  <% end %>

  <% if p('redis.tls.enabled') %> 
  redis:
    tls:
      enabled: true
      ca: (( file "/var/vcap/jobs/redis-blacksmith-plans/config/tls/redis.ca" ))
      ca_cert: (( file "/var/vcap/jobs/redis-blacksmith-plans/config/tls/redis.cert" ))
      ca_key: (( file "/var/vcap/jobs/redis-blacksmith-plans/config/tls/redis.key" ))

  <% end %>

  <% if plan["redis_maxmemory"] %>
  redis_maxmemory: <%= plan["redis_maxmemory"] %>
  <% end %>

  <% if plan["redis_notify-keyspace-events"] %>
  redis_notify-keyspace-events: <%= plan["redis_notify-keyspace-events"] %>
  <% end %>

  <% if plan["redis_slowlog-log-slower-than"] %>
  redis_slowlog-log-slower-than: <%= plan["redis_slowlog-log-slower-than"] %>
  <% end %>

  <% if plan["redis_slowlog-max-len"] %>
  redis_slowlog-max-len: <%= plan["redis_slowlog-max-len"] %>
  <% end %>

  <% if plan.has_key?("redis_no-appendfsync-on-rewrite") %>
  redis_no-appendfsync-on-rewrite: <%= plan["redis_no-appendfsync-on-rewrite"] ? "yes" : "no" %>
  <% end %>

  <% if plan["redis_auto-aof-rewrite-percentage"] %>
  redis_auto-aof-rewrite-percentage: <%= plan["redis_auto-aof-rewrite-percentage"] %>
  <% end %>

  <% if plan["redis_auto-aof-rewrite-min-size"] %>
  redis_auto-aof-rewrite-min-size: <%= plan["redis_auto-aof-rewrite-min-size"] %>
  <% end %>

  <% if plan["client_timeout"] %>
  client_timeout: <%= plan["client_timeout"] %>
  <% end %>
  <% if plan["client_tcpkeepalive"] %>
  client_tcpkeepalive: <%= plan["client_tcpkeepalive"] %>
  <% end %>
  <% if plan["client_connections"] %>
  client_connections: <%= plan["client_connections"] %>
  <% end %>
  <% if plan.has_key?("lua_scripting_enabled") %>
  lua_scripting_enabled: <%= plan["lua_scripting_enabled"] %>
  <% end %>
  <% if plan["azs"] %>
  azs: <%= plan["azs"] %>
  <% end %>
  <% if plan["type"] =~ /standalone/ %>
  <% if plan["persist"] %>
  persistent: true
  disk: <%= plan["disk"] || 1_024 %>
  <% else %>
  persistent: false
  <% end %>
  <% end %>

  <% if plan["type"] =~ /cluster/ && plan["masters"] > 0 %>
  masters:   <%= plan["masters"] %>
  replicas:  <%= plan["replicas"] || 1 %>
  instances: <%= plan["masters"] + plan["masters"] * (plan["replicas"] || 1) %>
  <% end %>

  <% if plan["exporter"] %>
releases:
- name:    prometheus
  version: 26.3.0
  url:     https://bosh.io/d/github.com/cloudfoundry-community/prometheus-boshrelease?v=26.3.0
  sha1:    d945d88b23dbfea03959d5404450567a90a7d833

instance_groups:
- name: <%= plan["type"] =~ /standalone/ ? "standalone" : "node" %>
  jobs:
  - name: redis_exporter
    release: prometheus
    properties:
      redis_exporter:
        redis:
          password: (( grab meta.password ))
  <% end %>
EOF


<% end %>
